if not game:IsLoaded() then
	game.Loaded:Wait()
end

local VirtualUser = game:GetService("VirtualUser")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Player = game:GetService("Players").LocalPlayer or game:GetService("Players").PlayerAdded:Wait()
Player.Idled:Connect(function()
	VirtualUser:CaptureController()
	VirtualUser:ClickButton2(Vector2.new())
end)

local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

local function Credits(Window)
	local Credits = Window:MakeTab({
		Name = "Credits",
		Icon = "rbxassetid://4483345998",
		PremiumOnly = false
	})
    Credits:AddLabel("üî• made by alyssa#2303 üî•")
    
	Credits:AddLabel("üî• re made by DragonZ_TH#4793 üî•")
	
	Credits:AddLabel("‚û° discord.gg/rtgv8Jp3fM ‚¨Ö")
	
end

local function Click(v)
	VirtualInputManager:SendMouseButtonEvent(v.AbsolutePosition.X+v.AbsoluteSize.X/2,v.AbsolutePosition.Y+50,0,true,v,1)
	VirtualInputManager:SendMouseButtonEvent(v.AbsolutePosition.X+v.AbsoluteSize.X/2,v.AbsolutePosition.Y+50,0,false,v,1)
end

local function comma(amount)
	local formatted = amount
	local k
	while true do  
		formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", '%1,%2')
		if (k==0) then
			break
		end
	end
	return formatted
end

local function CreateWindow()
	return OrionLib:MakeWindow({Name = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name, HidePremium = true, SaveConfig = true, ConfigFolder = "Idle Heroes", IntroEnabled = false, IntroText = ""})
end

if game.PlaceId == 9264596435 then -- Idle Heroes Simulator
	local Plot
	local PlayerPlot

	local SavedPosition

	local SelectedHero
	local SelectedChest

	local OriginalSelectedHero

	local UpgradeLevel
	local SwingLooping
	local Swing2Looping
	local NextLevelLooping
	local HireLooping
	local UpgradeLooping
	local UpgradeSkillLooping
	local UpgradeSkillLooping1
	local Lv1To125 = "Level 1" or "Level 2"  or "Level 3"  or "Level 4"  or "Level 5"  or "Level 6"  or "Level 7"  or "Level 8"  or "Level 9"  or "Level 10"  or "Level 11"  or "Level 12"  or "Level 13"  or "Level 14"  or "Level 15"  or "Level 16"  or "Level 17"  or "Level 18"  or "Level 19"  or "Level 20"  or "Level 21"  or "Level 22"  or "Level 23"  or "Level 24"  or "Level 25"  or "Level 26"  or "Level 27"  or "Level 28"  or "Level 29"  or "Level 30"  or "Level 31"  or "Level 32"  or "Level 33"  or "Level 34"  or "Level 35"  or "Level 36"  or "Level 37"  or "Level 38"  or "Level 39"  or "Level 40"  or "Level 41"  or "Level 42"  or "Level 43"  or "Level 44"  or "Level 45"  or "Level 46"  or "Level 47"  or "Level 48"  or "Level 49"  or "Level 50"  or "Level 51"  or "Level 52"  or "Level 53"  or "Level 54"  or "Level 55"  or "Level 56"  or "Level 57"  or "Level 58"  or "Level 59"  or "Level 60"  or "Level 61"  or "Level 62"  or "Level 63"  or "Level 64"  or "Level 65"  or "Level 66"  or "Level 67"  or "Level 68"  or "Level 69"  or "Level 70"  or "Level 71"  or "Level 72"  or "Level 73"  or "Level 74"  or "Level 75"  or "Level 76"  or "Level 77"  or "Level 78"  or "Level 79"  or "Level 80"  or "Level 81"  or "Level 82"  or "Level 83"  or "Level 84"  or "Level 85"  or "Level 86"  or "Level 87"  or "Level 88"  or "Level 89"  or "Level 90"  or "Level 91"  or "Level 92"  or "Level 93"  or "Level 94"  or "Level 95"  or "Level 96"  or "Level 97"  or "Level 98"  or "Level 99"  or "Level 100" or "Level 101" or "Level 102"  or "Level 103"  or "Level 104"  or "Level 105"  or "Level 106"  or "Level 107"  or "Level 108"  or "Level 109"  or "Level 110"  or "Level 111"  or "Level 112"  or "Level 113"  or "Level 114"  or "Level 115"  or "Level 116"  or "Level 117"  or "Level 118"  or "Level 119"  or "Level 120"  or "Level 121"  or "Level 122"  or "Level 123"  or "Level 124"  or "Level 125"
	local Lv125To200 = "Level 126" or "Level 127"  or "Level 128"  or "Level 129"  or "Level 130"  or "Level 131"  or "Level 132"  or "Level 133"  or "Level 134"  or "Level 135"  or "Level 136"  or "Level 137"  or "Level 138"  or "Level 139"  or "Level 140"  or "Level 141"  or "Level 142"  or "Level 143"  or "Level 144"  or "Level 145"  or "Level 146"  or "Level 147"  or "Level 148"  or "Level 149"  or "Level 150"  or "Level 151"  or "Level 152"  or "Level 153"  or "Level 154"  or "Level 155"  or "Level 156"  or "Level 157"  or "Level 158"  or "Level 159"  or "Level 160"  or "Level 161"  or "Level 162"  or "Level 163"  or "Level 164"  or "Level 165"  or "Level 166"  or "Level 167"  or "Level 168"  or "Level 169"  or "Level 170"  or "Level 171"  or "Level 172"  or "Level 173"  or "Level 174"  or "Level 175"  or "Level 176"  or "Level 177"  or "Level 178"  or "Level 179"  or "Level 180"  or "Level 181"  or "Level 182"  or "Level 183"  or "Level 184"  or "Level 185"  or "Level 186"  or "Level 187"  or "Level 188"  or "Level 189"  or "Level 190"  or "Level 191"  or "Level 192"  or "Level 193"  or "Level 194"  or "Level 195"  or "Level 196"  or "Level 197"  or "Level 198"  or "Level 199"  or "Level 200"
	local ChestLooping
	local ReincarnateLooping
	local MobLooping
	local SkillLooping
	local RerollLooping

	local IsInLoopReincarnate
	local IsInLoopNextLevel
	local IsInLoopAutoHire

	local HeadPosition

	local CurrentPage

	local HeroesList = {"nil"}
	local PlotList = {"Your Own Plot"}
	local EnchantList = {"None", "Sharp I", "Hero I", "Rich I", "Sharp II", "Hero II", "Rich II", "Luck I", "Sharp III", "Hero III", "Immortal I", "Rich III", "Luck II", "Sharp IV", "Hero IV", "Immortal II", "Rich IV", "Luck III", "Team Player", "Lifeless"}

	local RarityBackgrounds = {
		["0 0.803922 0.803922 0.803922 0 1 0.803922 0.803922 0.803922 0 "] = "Common",
		["0 0.211765 0.513726 1 0 1 0.211765 0.513726 1 0 "] = "Rare",
		["0 0.411765 0.113725 1 0 1 0.411765 0.113725 1 0 "] = "Epic",
		["0 1 0.807843 0.180392 0 1 1 0.807843 0.180392 0 "] = "Legendary",
		["0 1 0 0.984314 0 1 1 1 0 0 "] = "Mythical",
		["0 0.796078 0.564706 1 0 1 0.796078 0.564706 1 0 "] = "Demonic",
		["0 0.835294 0.713726 0.231373 0 1 0.835294 0.713726 0.231373 0 "] = "Godly",
		["0 1 0.47451 0.47451 0 1 1 0.47451 0.47451 0 "] = "Celestial"
	}

	for i,v in pairs(workspace.Plots:GetChildren()) do
		if v.Owner.Value == Player then
			Plot = v
			PlayerPlot = v
		end
	end
	

	for i,v in pairs(workspace.Plots:GetChildren()) do
		if v.Owner.Value and v.Owner.Value ~= Player then
			table.insert(PlotList, v.Owner.Value.Name)
		else
			v.Owner.Changed:Connect(function()
				if v.Owner.Value then
					table.insert(PlotList, v.Owner.Value.Name)
				end
			end)
		end
	end

	repeat task.wait() until Plot
	repeat task.wait() until Plot:FindFirstChild("Heroes")

	for i,v in pairs(Plot.Heroes:GetChildren()) do
		table.insert(HeroesList, v.Name)
	end

	Plot.Heroes.ChildAdded:Connect(function(child)
		if not table.find(HeroesList, child.Name) then
			table.insert(HeroesList, child.Name)
		end
	end)

	local Window = CreateWindow()

	local Main = Window:MakeTab({
		Name = "Main",
		Icon = "rbxassetid://4483345998",
		PremiumOnly = false
	})

local Workspace = game:GetService('Workspace')
local Player = game:GetService('Players').LocalPlayer
local Players = game:GetService('Players')
local Plots = Workspace.Plots
local RunService = game:GetService('RunService')
local function GetPlot()
    for i,v in pairs(Workspace.Plots:GetChildren()) do
        if v:FindFirstChild("Owner") and v.Owner.Value == Player then
            return v.Name
        end
    end
end
local function GetMonster(plot)
    if not plot:FindFirstChild("Enemy") then return end
    for i,v in pairs(plot.Enemy:GetChildren()) do
        return v.name
    end
end

	Main:AddToggle({
		Name = "ü§∫ Auto Attack",
		Default = false,
		Save = true,
		Flag = "AutoSwing2",
		Callback = function(Value)
		    	getgenv().AutoAttack = Value
                RunService.RenderStepped:Connect(function()
                if not getgenv().AutoAttack then return end
                local PlotName = GetPlot()
                local plot = workspace.Plots:FindFirstChild(PlotName)
                local MonsterName = GetMonster(plot)
                local monster = plot.Enemy:FindFirstChild(MonsterName)
                game:GetService("ReplicatedStorage").Packages._Index["sleitnick_knit@1.4.7"].knit.Services.WeaponService.RE.Swing:FireServer(monster)
            end)
		end
	})

	Main:AddToggle({
		Name = "üìä Auto NextLevel",
		Default = false,
		Save = true,
		Flag = "AutoNextLevel",
		Callback = function(Value)
			NextLevelLooping = Value
			while NextLevelLooping and task.wait() do
				if Plot.Buttons:FindFirstChild("NextLevel") then
					IsInLoopNextLevel = true

					if IsInLoopReincarnate then
						repeat task.wait() until not IsInLoopReincarnate
					elseif IsInLoopAutoHire then
						repeat task.wait() until not IsInLoopAutoHire
					end

					SavedPosition = Player.Character:WaitForChild("HumanoidRootPart").Position

					repeat task.wait() until Plot.Buttons:FindFirstChild("NextLevel"):FindFirstChild("Touch")

					repeat
						Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(Plot.Buttons:FindFirstChild("NextLevel").Touch.Position)
						task.wait()
					until not Plot.Buttons:FindFirstChild("NextLevel") or not NextLevelLooping

					Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(SavedPosition)

					IsInLoopNextLevel = false
				end
			end
			IsInLoopNextLevel = false
		end    
	})


	local RequiredLevel = 80
	local OtherLevel = 0

	Main:AddToggle({
		Name = "üîÅ Auto Reincarnate",
		Default = false,
		Save = true,
		Flag = "AutoReincarnate",
		Callback = function(Value)
			ReincarnateLooping = Value
			while ReincarnateLooping and task.wait(.25) do
				local ReincarnationsAmount = tonumber(Player.PlayerGui.Main.Frames.Achievements.Container.Stats.Container.Reincarnations.Label.Text:split(" ")[2])
				local ReincarnationsTable = {
					[1] = 80,
					[2] = 80,
					[3] = 80,
					[4] = 80,
					[5] = 85,
					[6] = 85,
					[7] = 85,
					[8] = 85,
					[9] = 85,
					[10] = 90,
					[11] = 90,
					[12] = 90,
					[13] = 90,
					[14] = 90,
					[15] = 95,
					[16] = 95,
					[17] = 95,
					[18] = 95,
					[19] = 95,
					[20] = 100,
					[21] = 100,
					[22] = 100,
					[23] = 100,
					[24] = 100,
					[25] = 100
				}

				if ReincarnationsTable[ReincarnationsAmount] and tonumber(Player.PlayerGui.Main.Top.Level.Text:split(" ")[2]) >= ReincarnationsTable[ReincarnationsAmount] then
					OtherLevel = ReincarnationsTable[ReincarnationsAmount]
				elseif ReincarnationsTable[ReincarnationsAmount] then
					OtherLevel = 0
				end

				if Player.PlayerGui.Main.Top.Wave.Wave.Text == "1/1" and (tonumber(Player.PlayerGui.Main.Top.Level.Text:split(" ")[2]) == RequiredLevel and Player.PlayerGui.Main.Top.Level.Text:split(" ")[3] ~= "Complete!") or OtherLevel ~= 0 then
					IsInLoopReincarnate = true

					if IsInLoopNextLevel then
						repeat task.wait() until not IsInLoopNextLevel
					elseif IsInLoopAutoHire then
						repeat task.wait() until not IsInLoopAutoHire
					end

					SavedPosition = Player.Character:WaitForChild("HumanoidRootPart").Position

					task.wait()

					Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-2041, 59, -26)

					repeat task.wait() until Player.PlayerGui.Main.Frames.Reincarnate.Visible == true

					repeat
						game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RE.Reincarnate:FireServer()
						task.wait()
					until Player.PlayerGui.Main.ChestOpening.Visible == true

					Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(SavedPosition)

					IsInLoopReincarnate = false
				elseif tonumber(Player.PlayerGui.Main.Top.Level.Text:split(" ")[2]) > RequiredLevel or (tonumber(Player.PlayerGui.Main.Top.Level.Text:split(" ")[2]) == RequiredLevel and Player.PlayerGui.Main.Top.Level.Text:split(" ")[3] == "Complete!") then
					RequiredLevel = RequiredLevel + 10
					print("Set RequiredLevel to "..RequiredLevel)
				end
			end
			IsInLoopReincarnate = false
		end
	})

	Main:AddToggle({
		Name = "‚ö° Auto Mob TP",
		Default = false,
		Save = true,
		Flag = "AutoMobTP",
		Callback = function(Value)
			MobLooping = Value
			while MobLooping and task.wait() do
				if #Plot.Enemy:GetChildren() == 0 then
					repeat task.wait() until Plot.Enemy:GetChildren()[1]
				end

				local Enemy = Plot.Enemy:GetChildren()[1]

				if IsInLoopReincarnate then
					repeat task.wait() until not IsInLoopReincarnate
				elseif IsInLoopNextLevel then
					repeat task.wait() until not IsInLoopNextLevel
				elseif IsInLoopAutoHire then
					repeat task.wait() until not IsInLoopAutoHire
				end

				if not Player.Character:FindFirstChild("HumanoidRootPart") then
					repeat task.wait() until Player.Character:FindFirstChild("HumanoidRootPart") or not MobLooping
				end

				Player.Character:FindFirstChild("HumanoidRootPart").CFrame = CFrame.new(Enemy.Position.X , Enemy.Position.Y, Enemy.Position.Z +5)
			end
			Player.Character:FindFirstChild("HumanoidRootPart").CFrame = Plot.Teleport.CFrame
		end
	})

	Main:AddToggle({
		Name = "‚öî Auto Use Skills",
		Default = false,
		Save = true,
		Flag = "AutoUseSkills",
		Callback = function(Value)
			SkillLooping = Value
			while SkillLooping and task.wait() do
				for i,v in pairs({"Enraged", "Eruption", "Misfortune", "Golden Rain", "Gold Potion", "Cold Runes", "Insight", "Enlightenment", "Replenish"}) do
					game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RE.UseSkill:FireServer(v)
					task.wait(.5)
				end
			end
		end
	})
	



	
	local Misc = Main:AddSection({
		Name = "",
	})

	Misc:AddDropdown({
		Name = "üè† Plot",
		Default = "Your Own Plot",
		Options = PlotList,
		Callback = function(Value)
			if Value == "Your Own Plot" then
				Plot = PlayerPlot
			else
				for i,v in pairs(workspace.Plots:GetChildren()) do
					if v.Owner.Value == game.Players:FindFirstChild(Value) then
						game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.WeaponService.RE.TeleportToPlot:FireServer(game.Players:FindFirstChild(Value))
						Plot = v
						print(v, Plot)
					end
				end
			end
		end
	})

	local Heroes = Window:MakeTab({
		Name = "Heroes",
		Icon = "rbxassetid://4483345998",
		PremiumOnly = false
	})

	Heroes:AddToggle({
		Name = "üëç Auto Hire Heroes",
		Default = false,
		Save = true,
		Flag = "AutoHire",
		Callback = function(Value)
			HireLooping = Value
			while HireLooping and task.wait() do
				if game:GetService("Workspace").Main.Hire:FindFirstChild("_displayHero") and not Plot.Heroes:FindFirstChild("The Reaper") then
					if tostring(game:GetService("Workspace").Main.Hire["_displayHero"].Highlight.OutlineColor) == "0.215686, 1, 0.266667" then
						IsInLoopAutoHire = true

						if IsInLoopReincarnate then
							repeat task.wait() until not IsInLoopReincarnate
						elseif IsInLoopNextLevel then
							repeat task.wait() until not IsInLoopNextLevel
						end

						SavedPosition = Player.Character:WaitForChild("HumanoidRootPart").Position

						task.wait()

						Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(-1886, 61, -92)

						task.wait(.25)

						game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RE.HireHero:FireServer(game:GetService("Workspace").Main.Hire["_displayHero"].Head.Nametag.Subject.Text)

						task.wait(.25)

						Player.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(SavedPosition)

						IsInLoopAutoHire = false

						task.wait(1)
					end
				elseif not game:GetService("Workspace").Main.Hire:FindFirstChild("_displayHero") and not Plot.Heroes:FindFirstChild("The Reaper") then
					IsInLoopAutoHire = true
                    wait (5)
					if IsInLoopReincarnate then
						repeat task.wait() until not IsInLoopReincarnate
					elseif IsInLoopNextLevel then
						repeat task.wait() until not IsInLoopNextLevel
					end

					game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.WeaponService.RE.TeleportToMain:FireServer()

					repeat task.wait() until game:GetService("Workspace").Main.Hire:FindFirstChild("_displayHero") or Plot.Heroes:FindFirstChild("The Reaper")

					game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.WeaponService.RE.TeleportToPlot:FireServer(Plot.Owner.Value)

					IsInLoopAutoHire = false
				end
			end
			IsInLoopAutoHire = false
		end
	})

	Heroes:AddDropdown({
		Name = "üìÉ Hero to Upgrade (leave blank for all)",
		Default = "nil",
		Options = HeroesList,
		Save = true,
		Flag = "SelectedHero",
		Callback = function(Value)
			if Value == "nil" then
				SelectedHero = nil
				OriginalSelectedHero = nil
			else
				SelectedHero = Value
				OriginalSelectedHero = Value
			end
		end    
	})

	require(Player.PlayerScripts.Client.Controllers.UIController.BuyCoins).Set = function()
		return
	end
	
	Heroes:AddToggle({
		Name = "üìà Auto Upgrade Hero",
		Default = false,
		Save = true,
		Flag = "AutoUpgrade",
		Callback = function(Value)
			UpgradeLooping = Value
			while UpgradeLooping and task.wait() do
				if game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.BuyLevel:InvokeServer(OriginalSelectedHero, 0) then
		    		print("Upgraded "..SelectedHero)
				end
			end
		end
	})
	
		Heroes:AddButton({
		Name = "üìà AutoBuySkill Bounty Hunter",
		Callback = function(Value)
            game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.BuyLevel:InvokeServer("Bounty Hunter",150)
        wait (.2)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Wild Strikes")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Enraged")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Earth Shaker")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","War Cry")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Swords Dance")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Brutal Fang")
        wait (.1)
        game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.HeroService.RF.LearnSkill:InvokeServer("Bounty Hunter","Storm Slice")
        wait (.1)
		end
	})

	local Passive = Window:MakeTab({
		Name = "Passive",
		Icon = "rbxassetid://4483345998",
		PremiumOnly = false
	})

	local SelectedEnchants = {}

	Passive:AddDropdown({
		Name = "Enchant(s) to Stop at (multiple choice)",
		Default = "None",
		Options = EnchantList,
		Callback = function(Value)
			if not table.find(SelectedEnchants, Value) and Value ~= "None" then
				table.insert(SelectedEnchants, Value)
			elseif Value ~= "None" then
				table.remove(SelectedEnchants, Value)
			end

			task.spawn(function()
				repeat task.wait() until EnchantLabel
				EnchantLabel:Set(table.concat(SelectedEnchants, ", "))
			end)
		end
	})

	EnchantLabel = Passive:AddParagraph("Selected Enchants","None")

	Player.PlayerGui.Main.ChestResult.Container.ChildAdded:Connect(function(child)
		repeat task.wait() until child.ItemName.Text ~= "OP Sword"

		print(child.ItemName.Text)

		if table.find(SelectedEnchants, child.ItemName.Text) then
			RerollLooping = false
		end
	end)

	Passive:AddToggle({
		Name = "üé≤ Auto Reroll Passive (must have ui open)",
		Save = true,
		Flag = "AutoRerollPassive",
		Callback = function(Value)
			RerollLooping = Value
			while RerollLooping and task.wait(.25) do
				if Player.PlayerGui.Main.Frames.Passives.Visible == true and Player.PlayerGui.Main.ChestOpening.Visible == false then
					Click(Player.PlayerGui.Main.Frames.Passives.CoreReroll.Button)

					repeat task.wait() until #Player.PlayerGui.Main.ChestResult.Container:GetChildren() == 1
				end
			end
		end
	})

	local Chest = Window:MakeTab({
		Name = "Chest",
		Icon = "rbxassetid://4483345998",
		PremiumOnly = false
	})

	Chest:AddDropdown({
		Name = "üì¶ Chest to Purchase",
		Options = {"Wooden", "Silver", "Golden", "Legendary", "Divine"},
		Save = true,
		Flag = "SelectedChest",
		Callback = function(Value)
			SelectedChest = Value
		end
	})

	Chest:AddToggle({
		Name = "üíµ Auto Buy Chest",
		Default = false,
		Callback = function(Value)
			ChestLooping = Value
			if SelectedChest and Value then
				while ChestLooping and task.wait(1) do
					game:GetService("ReplicatedStorage").Packages._Index:FindFirstChild("sleitnick_knit@1.4.7").knit.Services.ChestService.RF.BuyChest:InvokeServer(SelectedChest, "single")
				end
			end
		end
	})
end
OrionLib:Init()
